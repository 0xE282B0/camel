
/*
 * Camel EndpointConfiguration generated by camel-api-component-maven-plugin
 */
package org.apache.camel.component.zendesk;

import org.apache.camel.spi.Configurer;
import org.apache.camel.spi.ApiMethod;
import org.apache.camel.spi.ApiParam;
import org.apache.camel.spi.ApiParams;
import org.apache.camel.spi.UriParam;
import org.apache.camel.spi.UriParams;

/**
 * Camel EndpointConfiguration for org.zendesk.client.v2.Zendesk
 */
@ApiParams(apiName = "DEFAULT", apiMethods = {@ApiMethod(methodName = "addTagToOrganisations"), @ApiMethod(methodName = "addTagToTicket"), @ApiMethod(methodName = "addTagToTopics"), @ApiMethod(methodName = "associateAttachmentsToArticle"), @ApiMethod(methodName = "changeUserPassword"), @ApiMethod(methodName = "createArticle"), @ApiMethod(methodName = "createArticleTranslation"), @ApiMethod(methodName = "createAutomation"), @ApiMethod(methodName = "createCategory"), @ApiMethod(methodName = "createCategoryTranslation"), @ApiMethod(methodName = "createComment"), @ApiMethod(methodName = "createDynamicContentItem"), @ApiMethod(methodName = "createDynamicContentItemVariant"), @ApiMethod(methodName = "createForum"), @ApiMethod(methodName = "createGroup"), @ApiMethod(methodName = "createGroupMembership"), @ApiMethod(methodName = "createMacro"), @ApiMethod(methodName = "createOrUpdateUser"), @ApiMethod(methodName = "createOrUpdateUsers"), @ApiMethod(methodName = "createOrUpdateUsersAsync"), @ApiMethod(methodName = "createOrganization"), @ApiMethod(methodName = "createOrganizationMembership"), @ApiMethod(methodName = "createOrganizationMemberships"), @ApiMethod(methodName = "createOrganizationMembershipsAsync"), @ApiMethod(methodName = "createOrganizations"), @ApiMethod(methodName = "createOrganizationsAsync"), @ApiMethod(methodName = "createPermissionGroup"), @ApiMethod(methodName = "createRequest"), @ApiMethod(methodName = "createSatisfactionRating"), @ApiMethod(methodName = "createSection"), @ApiMethod(methodName = "createSectionTranslation"), @ApiMethod(methodName = "createTarget"), @ApiMethod(methodName = "createTicket"), @ApiMethod(methodName = "createTicketAsync"), @ApiMethod(methodName = "createTicketField"), @ApiMethod(methodName = "createTicketForm"), @ApiMethod(methodName = "createTicketFromTweet"), @ApiMethod(methodName = "createTickets"), @ApiMethod(methodName = "createTicketsAsync"), @ApiMethod(methodName = "createTopic"), @ApiMethod(methodName = "createTrigger"), @ApiMethod(methodName = "createUpload"), @ApiMethod(methodName = "createUploadArticle"), @ApiMethod(methodName = "createUser"), @ApiMethod(methodName = "createUserIdentity"), @ApiMethod(methodName = "createUserSegment"), @ApiMethod(methodName = "createUsers"), @ApiMethod(methodName = "createUsersAsync"), @ApiMethod(methodName = "deleteArticle"), @ApiMethod(methodName = "deleteArticleAttachment"), @ApiMethod(methodName = "deleteAttachment"), @ApiMethod(methodName = "deleteAutomation"), @ApiMethod(methodName = "deleteCategory"), @ApiMethod(methodName = "deleteDynamicContentItem"), @ApiMethod(methodName = "deleteDynamicContentItemVariant"), @ApiMethod(methodName = "deleteForum"), @ApiMethod(methodName = "deleteGroup"), @ApiMethod(methodName = "deleteGroupMembership"), @ApiMethod(methodName = "deleteOrganization"), @ApiMethod(methodName = "deleteOrganizationMembership"), @ApiMethod(methodName = "deleteOrganizationMemberships"), @ApiMethod(methodName = "deletePermissionGroup"), @ApiMethod(methodName = "deleteSection"), @ApiMethod(methodName = "deleteSuspendedTicket"), @ApiMethod(methodName = "deleteTarget"), @ApiMethod(methodName = "deleteTicket"), @ApiMethod(methodName = "deleteTicketField"), @ApiMethod(methodName = "deleteTickets"), @ApiMethod(methodName = "deleteTopic"), @ApiMethod(methodName = "deleteTranslation"), @ApiMethod(methodName = "deleteTrigger"), @ApiMethod(methodName = "deleteUpload"), @ApiMethod(methodName = "deleteUser"), @ApiMethod(methodName = "deleteUserIdentity"), @ApiMethod(methodName = "deleteUserSegment"), @ApiMethod(methodName = "getArticle"), @ApiMethod(methodName = "getArticleFromSearch"), @ApiMethod(methodName = "getArticleSubscriptions"), @ApiMethod(methodName = "getArticleTranslations"), @ApiMethod(methodName = "getArticles"), @ApiMethod(methodName = "getArticlesFromAllLabels"), @ApiMethod(methodName = "getArticlesFromAnyLabels"), @ApiMethod(methodName = "getArticlesFromPage"), @ApiMethod(methodName = "getArticlesIncrementally"), @ApiMethod(methodName = "getAssignableGroupMemberships"), @ApiMethod(methodName = "getAssignableGroups"), @ApiMethod(methodName = "getAttachment"), @ApiMethod(methodName = "getAttachmentsFromArticle"), @ApiMethod(methodName = "getAuthenticatedUser"), @ApiMethod(methodName = "getAutoCompleteOrganizations"), @ApiMethod(methodName = "getAutomation"), @ApiMethod(methodName = "getAutomations"), @ApiMethod(methodName = "getBrands"), @ApiMethod(methodName = "getCCRequests"), @ApiMethod(methodName = "getCategories"), @ApiMethod(methodName = "getCategory"), @ApiMethod(methodName = "getCategoryTranslations"), @ApiMethod(methodName = "getComplianceDeletionStatuses"), @ApiMethod(methodName = "getCurrentUser"), @ApiMethod(methodName = "getCustomAgentRoles"), @ApiMethod(methodName = "getDeletedTickets"), @ApiMethod(methodName = "getDynamicContentItem"), @ApiMethod(methodName = "getDynamicContentItemVariant"), @ApiMethod(methodName = "getDynamicContentItemVariants"), @ApiMethod(methodName = "getDynamicContentItems"), @ApiMethod(methodName = "getForum"), @ApiMethod(methodName = "getForums"), @ApiMethod(methodName = "getGroup"), @ApiMethod(methodName = "getGroupMembership"), @ApiMethod(methodName = "getGroupMembershipByUser"), @ApiMethod(methodName = "getGroupMemberships"), @ApiMethod(methodName = "getGroupOrganization"), @ApiMethod(methodName = "getGroupUsers"), @ApiMethod(methodName = "getGroups"), @ApiMethod(methodName = "getHelpCenterLocales"), @ApiMethod(methodName = "getHolidaysForSchedule"), @ApiMethod(methodName = "getIncrementalTicketsResult"), @ApiMethod(methodName = "getJobStatus"), @ApiMethod(methodName = "getJobStatusAsync"), @ApiMethod(methodName = "getJobStatuses"), @ApiMethod(methodName = "getJobStatusesAsync"), @ApiMethod(methodName = "getMacro"), @ApiMethod(methodName = "getMacros"), @ApiMethod(methodName = "getOpenRequests"), @ApiMethod(methodName = "getOrganization"), @ApiMethod(methodName = "getOrganizationFields"), @ApiMethod(methodName = "getOrganizationMembership"), @ApiMethod(methodName = "getOrganizationMembershipByUser"), @ApiMethod(methodName = "getOrganizationMembershipForUser"), @ApiMethod(methodName = "getOrganizationMemberships"), @ApiMethod(methodName = "getOrganizationMembershipsForOrg"), @ApiMethod(methodName = "getOrganizationMembershipsForUser"), @ApiMethod(methodName = "getOrganizationTickets"), @ApiMethod(methodName = "getOrganizationUsers"), @ApiMethod(methodName = "getOrganizations"), @ApiMethod(methodName = "getOrganizationsIncrementally"), @ApiMethod(methodName = "getPermissionGroup"), @ApiMethod(methodName = "getPermissionGroups"), @ApiMethod(methodName = "getRecentTickets"), @ApiMethod(methodName = "getRequest"), @ApiMethod(methodName = "getRequestComment"), @ApiMethod(methodName = "getRequestComments"), @ApiMethod(methodName = "getRequests"), @ApiMethod(methodName = "getSatisfactionRating"), @ApiMethod(methodName = "getSatisfactionRatings"), @ApiMethod(methodName = "getSchedule"), @ApiMethod(methodName = "getSchedules"), @ApiMethod(methodName = "getSearchResults"), @ApiMethod(methodName = "getSection"), @ApiMethod(methodName = "getSectionSubscriptions"), @ApiMethod(methodName = "getSectionTranslations"), @ApiMethod(methodName = "getSections"), @ApiMethod(methodName = "getSolvedRequests"), @ApiMethod(methodName = "getSuspendedTickets"), @ApiMethod(methodName = "getTarget"), @ApiMethod(methodName = "getTargets"), @ApiMethod(methodName = "getTicket"), @ApiMethod(methodName = "getTicketAudit"), @ApiMethod(methodName = "getTicketAudits"), @ApiMethod(methodName = "getTicketCollaborators"), @ApiMethod(methodName = "getTicketComments"), @ApiMethod(methodName = "getTicketField"), @ApiMethod(methodName = "getTicketFields"), @ApiMethod(methodName = "getTicketForm"), @ApiMethod(methodName = "getTicketForms"), @ApiMethod(methodName = "getTicketIncidents"), @ApiMethod(methodName = "getTicketMetric"), @ApiMethod(methodName = "getTicketMetricByTicket"), @ApiMethod(methodName = "getTicketMetrics"), @ApiMethod(methodName = "getTickets"), @ApiMethod(methodName = "getTicketsByExternalId"), @ApiMethod(methodName = "getTicketsFromSearch"), @ApiMethod(methodName = "getTicketsIncrementally"), @ApiMethod(methodName = "getTopic"), @ApiMethod(methodName = "getTopics"), @ApiMethod(methodName = "getTopicsByUser"), @ApiMethod(methodName = "getTrigger"), @ApiMethod(methodName = "getTriggers"), @ApiMethod(methodName = "getTwitterMonitors"), @ApiMethod(methodName = "getUser"), @ApiMethod(methodName = "getUserCCDTickets"), @ApiMethod(methodName = "getUserFields"), @ApiMethod(methodName = "getUserIdentities"), @ApiMethod(methodName = "getUserIdentity"), @ApiMethod(methodName = "getUserRelatedInfo"), @ApiMethod(methodName = "getUserRequestedTickets"), @ApiMethod(methodName = "getUserRequests"), @ApiMethod(methodName = "getUserSegment"), @ApiMethod(methodName = "getUserSegments"), @ApiMethod(methodName = "getUserSegmentsApplicable"), @ApiMethod(methodName = "getUserSubscriptions"), @ApiMethod(methodName = "getUsers"), @ApiMethod(methodName = "getUsersByRole"), @ApiMethod(methodName = "getUsersIncrementally"), @ApiMethod(methodName = "importTicket"), @ApiMethod(methodName = "importTopic"), @ApiMethod(methodName = "lookupOrganizationsByExternalId"), @ApiMethod(methodName = "lookupUserByEmail"), @ApiMethod(methodName = "lookupUserByExternalId"), @ApiMethod(methodName = "macrosShowChangesToTicket"), @ApiMethod(methodName = "macrosShowTicketAfterChanges"), @ApiMethod(methodName = "makePrivateTicketAudit"), @ApiMethod(methodName = "markTicketAsSpam"), @ApiMethod(methodName = "mergeUsers"), @ApiMethod(methodName = "notifyApp"), @ApiMethod(methodName = "permanentlyDeleteTicket"), @ApiMethod(methodName = "permanentlyDeleteTickets"), @ApiMethod(methodName = "permanentlyDeleteUser"), @ApiMethod(methodName = "queueCreateTicketAsync"), @ApiMethod(methodName = "removeTagFromOrganisations"), @ApiMethod(methodName = "removeTagFromTicket"), @ApiMethod(methodName = "removeTagFromTopics"), @ApiMethod(methodName = "requestVerifyUserIdentity"), @ApiMethod(methodName = "resetUserPassword"), @ApiMethod(methodName = "setGroupMembershipAsDefault"), @ApiMethod(methodName = "setOrganizationMembershipAsDefault"), @ApiMethod(methodName = "setTagOnOrganisations"), @ApiMethod(methodName = "setTagOnTicket"), @ApiMethod(methodName = "setTagOnTopics"), @ApiMethod(methodName = "setUserPrimaryIdentity"), @ApiMethod(methodName = "suspendUser"), @ApiMethod(methodName = "trustTicketAudit"), @ApiMethod(methodName = "unsuspendUser"), @ApiMethod(methodName = "updateArticle"), @ApiMethod(methodName = "updateArticleTranslation"), @ApiMethod(methodName = "updateAutomation"), @ApiMethod(methodName = "updateCategory"), @ApiMethod(methodName = "updateCategoryTranslation"), @ApiMethod(methodName = "updateDynamicContentItem"), @ApiMethod(methodName = "updateDynamicContentItemVariant"), @ApiMethod(methodName = "updateForum"), @ApiMethod(methodName = "updateGroup"), @ApiMethod(methodName = "updateInstallation"), @ApiMethod(methodName = "updateMacro"), @ApiMethod(methodName = "updateOrganization"), @ApiMethod(methodName = "updateOrganizations"), @ApiMethod(methodName = "updateOrganizationsAsync"), @ApiMethod(methodName = "updatePermissionGroup"), @ApiMethod(methodName = "updateRequest"), @ApiMethod(methodName = "updateSection"), @ApiMethod(methodName = "updateSectionTranslation"), @ApiMethod(methodName = "updateTicket"), @ApiMethod(methodName = "updateTicketField"), @ApiMethod(methodName = "updateTickets"), @ApiMethod(methodName = "updateTicketsAsync"), @ApiMethod(methodName = "updateTopic"), @ApiMethod(methodName = "updateTrigger"), @ApiMethod(methodName = "updateUser"), @ApiMethod(methodName = "updateUserIdentity"), @ApiMethod(methodName = "updateUserSegment"), @ApiMethod(methodName = "updateUsers"), @ApiMethod(methodName = "updateUsersAsync"), @ApiMethod(methodName = "verifyUserIdentity")})
@UriParams
@Configurer
public final class ZendeskEndpointConfiguration extends ZendeskConfiguration {
    @UriParam
    @ApiParam(apiMethods = "createArticle,deleteArticle,updateArticle")
    private org.zendesk.client.v2.model.hc.Article article;
    @UriParam
    @ApiParam(apiMethods = "deleteArticleAttachment")
    private org.zendesk.client.v2.model.hc.ArticleAttachments articleAttachments;
    @UriParam
    @ApiParam(apiMethods = "createArticleTranslation,getArticleSubscriptions,getArticleTranslations,getAttachmentsFromArticle,updateArticleTranslation")
    private Long articleId;
    @UriParam
    @ApiParam(apiMethods = "createUploadArticle")
    private Long articleId0;
    @UriParam
    @ApiParam(apiMethods = "deleteAttachment,getAttachment")
    private org.zendesk.client.v2.model.Attachment attachment;
    @UriParam
    @ApiParam(apiMethods = "associateAttachmentsToArticle")
    private java.util.List<org.zendesk.client.v2.model.Attachment> attachments;
    @UriParam
    @ApiParam(apiMethods = "getTicketAudit,makePrivateTicketAudit,trustTicketAudit")
    private org.zendesk.client.v2.model.Audit audit;
    @UriParam
    @ApiParam(apiMethods = "getTicketAudit,makePrivateTicketAudit,trustTicketAudit")
    private Long auditId;
    @UriParam
    @ApiParam(apiMethods = "createAutomation,updateAutomation")
    private org.zendesk.client.v2.model.Automation automation;
    @UriParam
    @ApiParam(apiMethods = "updateAutomation")
    private Long automationId;
    @UriParam
    @ApiParam(apiMethods = "deleteAutomation")
    private Long automationId0;
    @UriParam
    @ApiParam(apiMethods = "createCategory,deleteCategory,getArticles,getSections,updateCategory")
    private org.zendesk.client.v2.model.hc.Category category;
    @UriParam
    @ApiParam(apiMethods = "createCategoryTranslation,getCategoryTranslations,updateCategoryTranslation")
    private Long categoryId;
    @UriParam
    @ApiParam(apiMethods = "getForums")
    private Long category_id;
    @UriParam
    @ApiParam(apiMethods = "createComment,getRequestComment")
    private org.zendesk.client.v2.model.Comment comment;
    @UriParam
    @ApiParam(apiMethods = "getRequestComment")
    private Long commentId;
    @UriParam
    @ApiParam(apiMethods = "createUpload")
    private byte[] content;
    @UriParam
    @ApiParam(apiMethods = "createUpload")
    private String contentType;
    @UriParam
    @ApiParam(apiMethods = "lookupUserByEmail")
    private String email;
    @UriParam
    @ApiParam(apiMethods = "getTicketsIncrementally")
    private java.util.Date endTime;
    @UriParam
    @ApiParam(apiMethods = "getTicketsByExternalId,lookupOrganizationsByExternalId,lookupUserByExternalId")
    private String externalId;
    @UriParam
    @ApiParam(apiMethods = "createTicketField,deleteTicketField,updateTicketField")
    private org.zendesk.client.v2.model.Field field;
    @UriParam
    @ApiParam(apiMethods = "createUploadArticle")
    private java.io.File file;
    @UriParam
    @ApiParam(apiMethods = "createUpload")
    private String fileName;
    @UriParam
    @ApiParam(apiMethods = "createForum,deleteForum,updateForum")
    private org.zendesk.client.v2.model.Forum forum;
    @UriParam
    @ApiParam(apiMethods = "getTopics")
    private Long forum_id;
    @UriParam
    @ApiParam(apiMethods = "createGroup,deleteGroup,updateGroup")
    private org.zendesk.client.v2.model.Group group;
    @UriParam
    @ApiParam(apiMethods = "createGroupMembership,deleteGroupMembership,setGroupMembershipAsDefault")
    private org.zendesk.client.v2.model.GroupMembership groupMembership;
    @UriParam
    @ApiParam(apiMethods = "getAssignableGroupMemberships,getGroupMemberships")
    private Long group_id;
    @UriParam
    @ApiParam(apiMethods = "deleteGroupMembership,getGroupMembership")
    private Long group_membership_id;
    @UriParam
    @ApiParam(apiMethods = "addTagToOrganisations,addTagToTicket,addTagToTopics,deleteArticleAttachment,deleteAttachment,deleteGroup,deleteGroupMembership,deleteOrganization,deleteOrganizationMembership,deleteOrganizationMemberships,deletePermissionGroup,deleteSuspendedTicket,deleteTicket,deleteTicketField,deleteTickets,deleteUser,deleteUserSegment,getArticle,getAttachment,getAutomation,getCategory,getDynamicContentItem,getDynamicContentItemVariant,getForum,getGroup,getGroupMembership,getGroupUsers,getOrganization,getOrganizationMembership,getOrganizationMembershipForUser,getOrganizationUsers,getPermissionGroup,getRequest,getRequestComments,getSatisfactionRating,getSection,getTarget,getTicket,getTicketAudit,getTicketCollaborators,getTicketComments,getTicketField,getTicketForm,getTicketIncidents,getTicketMetric,getTicketMetricByTicket,getTickets,getTopic,getTopics,getTrigger,getUser,getUserRequests,getUserSegment,getUserSegments,makePrivateTicketAudit,markTicketAsSpam,permanentlyDeleteTicket,permanentlyDeleteTickets,permanentlyDeleteUser,removeTagFromOrganisations,removeTagFromTicket,removeTagFromTopics,resetUserPassword,setTagOnOrganisations,setTagOnTicket,setTagOnTopics,suspendUser,trustTicketAudit,unsuspendUser")
    private Long id;
    @UriParam
    @ApiParam(apiMethods = "associateAttachmentsToArticle")
    private String idArticle;
    @UriParam
    @ApiParam(apiMethods = "createUserIdentity,deleteUserIdentity,getUserIdentity,requestVerifyUserIdentity,setUserPrimaryIdentity,updateUserIdentity,verifyUserIdentity")
    private org.zendesk.client.v2.model.Identity identity;
    @UriParam
    @ApiParam(apiMethods = "deleteUserIdentity,getUserIdentity,requestVerifyUserIdentity,setUserPrimaryIdentity,verifyUserIdentity")
    private Long identityId;
    @UriParam
    @ApiParam(apiMethods = "deleteOrganizationMemberships,deleteTickets,getTickets,getTopics,permanentlyDeleteTickets")
    private long[] ids;
    @UriParam
    @ApiParam(apiMethods = "getTicketsByExternalId")
    private Boolean includeArchived;
    @UriParam
    @ApiParam(apiMethods = "createUploadArticle")
    private Boolean inline;
    @UriParam
    @ApiParam(apiMethods = "updateInstallation")
    private Integer installationId;
    @UriParam
    @ApiParam(apiMethods = "createDynamicContentItem,deleteDynamicContentItem,getDynamicContentItemVariants,updateDynamicContentItem")
    private org.zendesk.client.v2.model.dynamic.DynamicContentItem item;
    @UriParam
    @ApiParam(apiMethods = "createDynamicContentItemVariant,deleteDynamicContentItemVariant,getDynamicContentItemVariant,updateDynamicContentItemVariant")
    private Long itemId;
    @UriParam
    @ApiParam(apiMethods = "notifyApp,updateInstallation")
    private String json;
    @UriParam
    @ApiParam(apiMethods = "getArticlesFromAllLabels,getArticlesFromAnyLabels")
    private java.util.List<String> labels;
    @UriParam
    @ApiParam(apiMethods = "getArticleSubscriptions,getArticles,getSectionSubscriptions,updateArticleTranslation,updateCategoryTranslation,updateSectionTranslation")
    private String locale;
    @UriParam
    @ApiParam(apiMethods = "createMacro,updateMacro")
    private org.zendesk.client.v2.model.Macro macro;
    @UriParam
    @ApiParam(apiMethods = "getMacro,macrosShowChangesToTicket,macrosShowTicketAfterChanges")
    private Long macroId;
    @UriParam
    @ApiParam(apiMethods = "updateMacro")
    private Long macroId0;
    @UriParam
    @ApiParam(apiMethods = "createTicketFromTweet")
    private Long monitorId;
    @UriParam
    @ApiParam(apiMethods = "getAutoCompleteOrganizations")
    private String name;
    @UriParam
    @ApiParam(apiMethods = "changeUserPassword")
    private String newPassword;
    @UriParam
    @ApiParam(apiMethods = "createArticle")
    private Boolean notifySubscribers;
    @UriParam
    @ApiParam(apiMethods = "changeUserPassword")
    private String oldPassword;
    @UriParam
    @ApiParam(apiMethods = "getTicketComments")
    private org.zendesk.client.v2.model.SortOrder order;
    @UriParam
    @ApiParam(apiMethods = "createOrganization,deleteOrganization,updateOrganization")
    private org.zendesk.client.v2.model.Organization organization;
    @UriParam
    @ApiParam(apiMethods = "getOrganizationTickets")
    private Long organizationId;
    @UriParam
    @ApiParam(apiMethods = "createOrganizations,createOrganizationsAsync,updateOrganizations,updateOrganizationsAsync")
    private java.util.List<org.zendesk.client.v2.model.Organization> organizationList;
    @UriParam
    @ApiParam(apiMethods = "createOrganizationMembership,deleteOrganizationMembership,setOrganizationMembershipAsDefault")
    private org.zendesk.client.v2.model.OrganizationMembership organizationMembership;
    @UriParam
    @ApiParam(apiMethods = "createOrganizationMemberships,createOrganizationMembershipsAsync")
    private java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMembershipList;
    @UriParam
    @ApiParam(apiMethods = "createOrganizationMemberships")
    private org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships;
    @UriParam
    @ApiParam(apiMethods = "getOrganizationMembershipsForOrg")
    private Long organization_id;
    @UriParam
    @ApiParam(apiMethods = "deleteOrganizationMembership,getGroupOrganization")
    private Long organization_membership_id;
    @UriParam
    @ApiParam(apiMethods = "createOrganizations,updateOrganizations")
    private org.zendesk.client.v2.model.Organization[] organizations;
    @UriParam
    @ApiParam(apiMethods = "getArticlesFromPage")
    private Integer page;
    @UriParam
    @ApiParam(apiMethods = "getSearchResults")
    private String parameters;
    @UriParam
    @ApiParam(apiMethods = "getSearchResults")
    private java.util.Map<String,Object> params;
    @UriParam
    @ApiParam(apiMethods = "resetUserPassword")
    private String password;
    @UriParam
    @ApiParam(apiMethods = "createPermissionGroup,deletePermissionGroup,updatePermissionGroup")
    private org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup;
    @UriParam
    @ApiParam(apiMethods = "getSearchResults")
    private String query;
    @UriParam
    @ApiParam(apiMethods = "createRequest,getRequestComment,getRequestComments,updateRequest")
    private org.zendesk.client.v2.model.Request request;
    @UriParam
    @ApiParam(apiMethods = "getRequestComment")
    private Long requestId;
    @UriParam
    @ApiParam(apiMethods = "getUsersByRole")
    private String role;
    @UriParam
    @ApiParam(apiMethods = "getUsersByRole")
    private String[] roles;
    @UriParam
    @ApiParam(apiMethods = "createSatisfactionRating")
    private org.zendesk.client.v2.model.SatisfactionRating satisfactionRating;
    @UriParam
    @ApiParam(apiMethods = "getHolidaysForSchedule,getSchedule")
    private org.zendesk.client.v2.model.schedules.Schedule schedule;
    @UriParam
    @ApiParam(apiMethods = "getHolidaysForSchedule,getSchedule")
    private Long scheduleId;
    @UriParam
    @ApiParam(apiMethods = "getArticleFromSearch,getTicketsFromSearch")
    private String searchTerm;
    @UriParam
    @ApiParam(apiMethods = "createSection,deleteSection,getArticles,updateSection")
    private org.zendesk.client.v2.model.hc.Section section;
    @UriParam
    @ApiParam(apiMethods = "createSectionTranslation,getArticleFromSearch,getSectionSubscriptions,getSectionTranslations,updateSectionTranslation")
    private Long sectionId;
    @UriParam
    @ApiParam(apiMethods = "getDeletedTickets,getSearchResults")
    private String sortBy;
    @UriParam
    @ApiParam(apiMethods = "getDeletedTickets,getSearchResults")
    private org.zendesk.client.v2.model.SortOrder sortOrder;
    @UriParam
    @ApiParam(apiMethods = "getArticlesIncrementally,getOrganizationsIncrementally,getTicketsIncrementally,getUsersIncrementally")
    private java.util.Date startTime;
    @UriParam
    @ApiParam(apiMethods = "getJobStatus,getJobStatusAsync")
    private org.zendesk.client.v2.model.JobStatus status;
    @UriParam
    @ApiParam(apiMethods = "getJobStatuses,getJobStatusesAsync")
    private java.util.List<org.zendesk.client.v2.model.JobStatus> statuses;
    @UriParam
    @ApiParam(apiMethods = "deleteSuspendedTicket")
    private org.zendesk.client.v2.model.SuspendedTicket suspendedTicket;
    @UriParam
    @ApiParam(apiMethods = "addTagToOrganisations,addTagToTicket,addTagToTopics,removeTagFromOrganisations,removeTagFromTicket,removeTagFromTopics,setTagOnOrganisations,setTagOnTicket,setTagOnTopics")
    private String[] tags;
    @UriParam
    @ApiParam(apiMethods = "createTarget")
    private org.zendesk.client.v2.model.targets.Target target;
    @UriParam
    @ApiParam(apiMethods = "deleteTarget")
    private Long targetId;
    @UriParam
    @ApiParam(apiMethods = "createSatisfactionRating,createTicket,createTicketAsync,deleteTicket,getTicketAudit,getTicketAudits,makePrivateTicketAudit,markTicketAsSpam,permanentlyDeleteTicket,queueCreateTicketAsync,trustTicketAudit,updateTicket")
    private org.zendesk.client.v2.model.Ticket ticket;
    @UriParam
    @ApiParam(apiMethods = "createTicketForm")
    private org.zendesk.client.v2.model.TicketForm ticketForm;
    @UriParam
    @ApiParam(apiMethods = "createComment,createSatisfactionRating,getTicketAudit,macrosShowTicketAfterChanges,makePrivateTicketAudit,trustTicketAudit")
    private Long ticketId;
    @UriParam
    @ApiParam(apiMethods = "getTicketAudits")
    private Long ticketId0;
    @UriParam
    @ApiParam(apiMethods = "importTicket")
    private org.zendesk.client.v2.model.TicketImport ticketImport;
    @UriParam
    @ApiParam(apiMethods = "createTickets,createTicketsAsync,updateTickets,updateTicketsAsync")
    private java.util.List<org.zendesk.client.v2.model.Ticket> ticketList;
    @UriParam
    @ApiParam(apiMethods = "createTickets,updateTickets")
    private org.zendesk.client.v2.model.Ticket[] tickets;
    @UriParam
    @ApiParam(apiMethods = "createUpload,deleteUpload")
    private String token;
    @UriParam
    @ApiParam(apiMethods = "createTopic,deleteTopic,importTopic,updateTopic")
    private org.zendesk.client.v2.model.Topic topic;
    @UriParam
    @ApiParam(apiMethods = "createArticleTranslation,createCategoryTranslation,createSectionTranslation,deleteTranslation,updateArticleTranslation,updateCategoryTranslation,updateSectionTranslation")
    private org.zendesk.client.v2.model.hc.Translation translation;
    @UriParam
    @ApiParam(apiMethods = "deleteTranslation")
    private Long translationId;
    @UriParam
    @ApiParam(apiMethods = "createTrigger,updateTrigger")
    private org.zendesk.client.v2.model.Trigger trigger;
    @UriParam
    @ApiParam(apiMethods = "deleteTrigger")
    private Long triggerId;
    @UriParam
    @ApiParam(apiMethods = "updateTrigger")
    private Long triggerId0;
    @UriParam
    @ApiParam(apiMethods = "createTicketFromTweet")
    private Long tweetId;
    @UriParam
    @ApiParam(apiMethods = "getSearchResults")
    private Class<?> type;
    @UriParam
    @ApiParam(apiMethods = "getIncrementalTicketsResult")
    private Long unixEpochTime;
    @UriParam
    @ApiParam(apiMethods = "deleteUpload")
    private org.zendesk.client.v2.model.Attachment.Upload upload;
    @UriParam
    @ApiParam(apiMethods = "changeUserPassword,createOrUpdateUser,createUser,createUserIdentity,deleteUser,deleteUserIdentity,getUserIdentities,getUserIdentity,getUserRequests,getUserSubscriptions,permanentlyDeleteUser,requestVerifyUserIdentity,resetUserPassword,setUserPrimaryIdentity,updateUser,updateUserIdentity,verifyUserIdentity")
    private org.zendesk.client.v2.model.User user;
    @UriParam
    @ApiParam(apiMethods = "createUserIdentity,deleteUserIdentity,getComplianceDeletionStatuses,getUserCCDTickets,getUserIdentities,getUserIdentity,getUserRelatedInfo,getUserRequestedTickets,requestVerifyUserIdentity,setUserPrimaryIdentity,updateUserIdentity,verifyUserIdentity")
    private Long userId;
    @UriParam
    @ApiParam(apiMethods = "getUserSubscriptions")
    private Long userId0;
    @UriParam
    @ApiParam(apiMethods = "mergeUsers")
    private Long userIdThatWillBeMerged;
    @UriParam
    @ApiParam(apiMethods = "mergeUsers")
    private Long userIdThatWillRemain;
    @UriParam
    @ApiParam(apiMethods = "createUsers,createUsersAsync")
    private java.util.List<org.zendesk.client.v2.model.User> userList;
    @UriParam
    @ApiParam(apiMethods = "createUserSegment,deleteUserSegment,getSections,getTopics,updateUserSegment")
    private org.zendesk.client.v2.model.hc.UserSegment userSegment;
    @UriParam
    @ApiParam(apiMethods = "createGroupMembership,createOrganizationMembership,deleteGroupMembership,deleteOrganizationMembership,getGroupMembership,getGroupMembershipByUser,getGroupOrganization,getOrganizationMembershipByUser,getOrganizationMembershipForUser,getOrganizationMembershipsForUser,getTopicsByUser,setGroupMembershipAsDefault,setOrganizationMembershipAsDefault")
    private Long user_id;
    @UriParam
    @ApiParam(apiMethods = "createOrUpdateUsers,createUsers,updateUsers")
    private org.zendesk.client.v2.model.User[] users;
    @UriParam
    @ApiParam(apiMethods = "createOrUpdateUsers,createOrUpdateUsersAsync,updateUsers,updateUsersAsync")
    private java.util.List<org.zendesk.client.v2.model.User> usersList;
    @UriParam
    @ApiParam(apiMethods = "createDynamicContentItemVariant,deleteDynamicContentItemVariant,updateDynamicContentItemVariant")
    private org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant;

    public org.zendesk.client.v2.model.hc.Article getArticle() {
        return article;
    }

    public void setArticle(org.zendesk.client.v2.model.hc.Article article) {
        this.article = article;
    }

    public org.zendesk.client.v2.model.hc.ArticleAttachments getArticleAttachments() {
        return articleAttachments;
    }

    public void setArticleAttachments(org.zendesk.client.v2.model.hc.ArticleAttachments articleAttachments) {
        this.articleAttachments = articleAttachments;
    }

    public Long getArticleId() {
        return articleId;
    }

    public void setArticleId(Long articleId) {
        this.articleId = articleId;
    }

    public Long getArticleId0() {
        return articleId0;
    }

    public void setArticleId0(Long articleId0) {
        this.articleId0 = articleId0;
    }

    public org.zendesk.client.v2.model.Attachment getAttachment() {
        return attachment;
    }

    public void setAttachment(org.zendesk.client.v2.model.Attachment attachment) {
        this.attachment = attachment;
    }

    public java.util.List<org.zendesk.client.v2.model.Attachment> getAttachments() {
        return attachments;
    }

    public void setAttachments(java.util.List<org.zendesk.client.v2.model.Attachment> attachments) {
        this.attachments = attachments;
    }

    public org.zendesk.client.v2.model.Audit getAudit() {
        return audit;
    }

    public void setAudit(org.zendesk.client.v2.model.Audit audit) {
        this.audit = audit;
    }

    public Long getAuditId() {
        return auditId;
    }

    public void setAuditId(Long auditId) {
        this.auditId = auditId;
    }

    public org.zendesk.client.v2.model.Automation getAutomation() {
        return automation;
    }

    public void setAutomation(org.zendesk.client.v2.model.Automation automation) {
        this.automation = automation;
    }

    public Long getAutomationId() {
        return automationId;
    }

    public void setAutomationId(Long automationId) {
        this.automationId = automationId;
    }

    public Long getAutomationId0() {
        return automationId0;
    }

    public void setAutomationId0(Long automationId0) {
        this.automationId0 = automationId0;
    }

    public org.zendesk.client.v2.model.hc.Category getCategory() {
        return category;
    }

    public void setCategory(org.zendesk.client.v2.model.hc.Category category) {
        this.category = category;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Long category_id) {
        this.category_id = category_id;
    }

    public org.zendesk.client.v2.model.Comment getComment() {
        return comment;
    }

    public void setComment(org.zendesk.client.v2.model.Comment comment) {
        this.comment = comment;
    }

    public Long getCommentId() {
        return commentId;
    }

    public void setCommentId(Long commentId) {
        this.commentId = commentId;
    }

    public byte[] getContent() {
        return content;
    }

    public void setContent(byte[] content) {
        this.content = content;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public String getExternalId() {
        return externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    public org.zendesk.client.v2.model.Field getField() {
        return field;
    }

    public void setField(org.zendesk.client.v2.model.Field field) {
        this.field = field;
    }

    public java.io.File getFile() {
        return file;
    }

    public void setFile(java.io.File file) {
        this.file = file;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public org.zendesk.client.v2.model.Forum getForum() {
        return forum;
    }

    public void setForum(org.zendesk.client.v2.model.Forum forum) {
        this.forum = forum;
    }

    public Long getForum_id() {
        return forum_id;
    }

    public void setForum_id(Long forum_id) {
        this.forum_id = forum_id;
    }

    public org.zendesk.client.v2.model.Group getGroup() {
        return group;
    }

    public void setGroup(org.zendesk.client.v2.model.Group group) {
        this.group = group;
    }

    public org.zendesk.client.v2.model.GroupMembership getGroupMembership() {
        return groupMembership;
    }

    public void setGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership) {
        this.groupMembership = groupMembership;
    }

    public Long getGroup_id() {
        return group_id;
    }

    public void setGroup_id(Long group_id) {
        this.group_id = group_id;
    }

    public Long getGroup_membership_id() {
        return group_membership_id;
    }

    public void setGroup_membership_id(Long group_membership_id) {
        this.group_membership_id = group_membership_id;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getIdArticle() {
        return idArticle;
    }

    public void setIdArticle(String idArticle) {
        this.idArticle = idArticle;
    }

    public org.zendesk.client.v2.model.Identity getIdentity() {
        return identity;
    }

    public void setIdentity(org.zendesk.client.v2.model.Identity identity) {
        this.identity = identity;
    }

    public Long getIdentityId() {
        return identityId;
    }

    public void setIdentityId(Long identityId) {
        this.identityId = identityId;
    }

    public long[] getIds() {
        return ids;
    }

    public void setIds(long[] ids) {
        this.ids = ids;
    }

    public Boolean getIncludeArchived() {
        return includeArchived;
    }

    public void setIncludeArchived(Boolean includeArchived) {
        this.includeArchived = includeArchived;
    }

    public Boolean getInline() {
        return inline;
    }

    public void setInline(Boolean inline) {
        this.inline = inline;
    }

    public Integer getInstallationId() {
        return installationId;
    }

    public void setInstallationId(Integer installationId) {
        this.installationId = installationId;
    }

    public org.zendesk.client.v2.model.dynamic.DynamicContentItem getItem() {
        return item;
    }

    public void setItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item) {
        this.item = item;
    }

    public Long getItemId() {
        return itemId;
    }

    public void setItemId(Long itemId) {
        this.itemId = itemId;
    }

    public String getJson() {
        return json;
    }

    public void setJson(String json) {
        this.json = json;
    }

    public java.util.List<String> getLabels() {
        return labels;
    }

    public void setLabels(java.util.List<String> labels) {
        this.labels = labels;
    }

    public String getLocale() {
        return locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    public org.zendesk.client.v2.model.Macro getMacro() {
        return macro;
    }

    public void setMacro(org.zendesk.client.v2.model.Macro macro) {
        this.macro = macro;
    }

    public Long getMacroId() {
        return macroId;
    }

    public void setMacroId(Long macroId) {
        this.macroId = macroId;
    }

    public Long getMacroId0() {
        return macroId0;
    }

    public void setMacroId0(Long macroId0) {
        this.macroId0 = macroId0;
    }

    public Long getMonitorId() {
        return monitorId;
    }

    public void setMonitorId(Long monitorId) {
        this.monitorId = monitorId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNewPassword() {
        return newPassword;
    }

    public void setNewPassword(String newPassword) {
        this.newPassword = newPassword;
    }

    public Boolean getNotifySubscribers() {
        return notifySubscribers;
    }

    public void setNotifySubscribers(Boolean notifySubscribers) {
        this.notifySubscribers = notifySubscribers;
    }

    public String getOldPassword() {
        return oldPassword;
    }

    public void setOldPassword(String oldPassword) {
        this.oldPassword = oldPassword;
    }

    public org.zendesk.client.v2.model.SortOrder getOrder() {
        return order;
    }

    public void setOrder(org.zendesk.client.v2.model.SortOrder order) {
        this.order = order;
    }

    public org.zendesk.client.v2.model.Organization getOrganization() {
        return organization;
    }

    public void setOrganization(org.zendesk.client.v2.model.Organization organization) {
        this.organization = organization;
    }

    public Long getOrganizationId() {
        return organizationId;
    }

    public void setOrganizationId(Long organizationId) {
        this.organizationId = organizationId;
    }

    public java.util.List<org.zendesk.client.v2.model.Organization> getOrganizationList() {
        return organizationList;
    }

    public void setOrganizationList(java.util.List<org.zendesk.client.v2.model.Organization> organizationList) {
        this.organizationList = organizationList;
    }

    public org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership() {
        return organizationMembership;
    }

    public void setOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership) {
        this.organizationMembership = organizationMembership;
    }

    public java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipList() {
        return organizationMembershipList;
    }

    public void setOrganizationMembershipList(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMembershipList) {
        this.organizationMembershipList = organizationMembershipList;
    }

    public org.zendesk.client.v2.model.OrganizationMembership[] getOrganizationMemberships() {
        return organizationMemberships;
    }

    public void setOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships) {
        this.organizationMemberships = organizationMemberships;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public Long getOrganization_membership_id() {
        return organization_membership_id;
    }

    public void setOrganization_membership_id(Long organization_membership_id) {
        this.organization_membership_id = organization_membership_id;
    }

    public org.zendesk.client.v2.model.Organization[] getOrganizations() {
        return organizations;
    }

    public void setOrganizations(org.zendesk.client.v2.model.Organization[] organizations) {
        this.organizations = organizations;
    }

    public Integer getPage() {
        return page;
    }

    public void setPage(Integer page) {
        this.page = page;
    }

    public String getParameters() {
        return parameters;
    }

    public void setParameters(String parameters) {
        this.parameters = parameters;
    }

    public java.util.Map<String,Object> getParams() {
        return params;
    }

    public void setParams(java.util.Map<String,Object> params) {
        this.params = params;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup() {
        return permissionGroup;
    }

    public void setPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup) {
        this.permissionGroup = permissionGroup;
    }

    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public org.zendesk.client.v2.model.Request getRequest() {
        return request;
    }

    public void setRequest(org.zendesk.client.v2.model.Request request) {
        this.request = request;
    }

    public Long getRequestId() {
        return requestId;
    }

    public void setRequestId(Long requestId) {
        this.requestId = requestId;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String[] getRoles() {
        return roles;
    }

    public void setRoles(String[] roles) {
        this.roles = roles;
    }

    public org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating() {
        return satisfactionRating;
    }

    public void setSatisfactionRating(org.zendesk.client.v2.model.SatisfactionRating satisfactionRating) {
        this.satisfactionRating = satisfactionRating;
    }

    public org.zendesk.client.v2.model.schedules.Schedule getSchedule() {
        return schedule;
    }

    public void setSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule) {
        this.schedule = schedule;
    }

    public Long getScheduleId() {
        return scheduleId;
    }

    public void setScheduleId(Long scheduleId) {
        this.scheduleId = scheduleId;
    }

    public String getSearchTerm() {
        return searchTerm;
    }

    public void setSearchTerm(String searchTerm) {
        this.searchTerm = searchTerm;
    }

    public org.zendesk.client.v2.model.hc.Section getSection() {
        return section;
    }

    public void setSection(org.zendesk.client.v2.model.hc.Section section) {
        this.section = section;
    }

    public Long getSectionId() {
        return sectionId;
    }

    public void setSectionId(Long sectionId) {
        this.sectionId = sectionId;
    }

    public String getSortBy() {
        return sortBy;
    }

    public void setSortBy(String sortBy) {
        this.sortBy = sortBy;
    }

    public org.zendesk.client.v2.model.SortOrder getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(org.zendesk.client.v2.model.SortOrder sortOrder) {
        this.sortOrder = sortOrder;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public org.zendesk.client.v2.model.JobStatus getStatus() {
        return status;
    }

    public void setStatus(org.zendesk.client.v2.model.JobStatus status) {
        this.status = status;
    }

    public java.util.List<org.zendesk.client.v2.model.JobStatus> getStatuses() {
        return statuses;
    }

    public void setStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses) {
        this.statuses = statuses;
    }

    public org.zendesk.client.v2.model.SuspendedTicket getSuspendedTicket() {
        return suspendedTicket;
    }

    public void setSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket suspendedTicket) {
        this.suspendedTicket = suspendedTicket;
    }

    public String[] getTags() {
        return tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }

    public org.zendesk.client.v2.model.targets.Target getTarget() {
        return target;
    }

    public void setTarget(org.zendesk.client.v2.model.targets.Target target) {
        this.target = target;
    }

    public Long getTargetId() {
        return targetId;
    }

    public void setTargetId(Long targetId) {
        this.targetId = targetId;
    }

    public org.zendesk.client.v2.model.Ticket getTicket() {
        return ticket;
    }

    public void setTicket(org.zendesk.client.v2.model.Ticket ticket) {
        this.ticket = ticket;
    }

    public org.zendesk.client.v2.model.TicketForm getTicketForm() {
        return ticketForm;
    }

    public void setTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm) {
        this.ticketForm = ticketForm;
    }

    public Long getTicketId() {
        return ticketId;
    }

    public void setTicketId(Long ticketId) {
        this.ticketId = ticketId;
    }

    public Long getTicketId0() {
        return ticketId0;
    }

    public void setTicketId0(Long ticketId0) {
        this.ticketId0 = ticketId0;
    }

    public org.zendesk.client.v2.model.TicketImport getTicketImport() {
        return ticketImport;
    }

    public void setTicketImport(org.zendesk.client.v2.model.TicketImport ticketImport) {
        this.ticketImport = ticketImport;
    }

    public java.util.List<org.zendesk.client.v2.model.Ticket> getTicketList() {
        return ticketList;
    }

    public void setTicketList(java.util.List<org.zendesk.client.v2.model.Ticket> ticketList) {
        this.ticketList = ticketList;
    }

    public org.zendesk.client.v2.model.Ticket[] getTickets() {
        return tickets;
    }

    public void setTickets(org.zendesk.client.v2.model.Ticket[] tickets) {
        this.tickets = tickets;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public org.zendesk.client.v2.model.Topic getTopic() {
        return topic;
    }

    public void setTopic(org.zendesk.client.v2.model.Topic topic) {
        this.topic = topic;
    }

    public org.zendesk.client.v2.model.hc.Translation getTranslation() {
        return translation;
    }

    public void setTranslation(org.zendesk.client.v2.model.hc.Translation translation) {
        this.translation = translation;
    }

    public Long getTranslationId() {
        return translationId;
    }

    public void setTranslationId(Long translationId) {
        this.translationId = translationId;
    }

    public org.zendesk.client.v2.model.Trigger getTrigger() {
        return trigger;
    }

    public void setTrigger(org.zendesk.client.v2.model.Trigger trigger) {
        this.trigger = trigger;
    }

    public Long getTriggerId() {
        return triggerId;
    }

    public void setTriggerId(Long triggerId) {
        this.triggerId = triggerId;
    }

    public Long getTriggerId0() {
        return triggerId0;
    }

    public void setTriggerId0(Long triggerId0) {
        this.triggerId0 = triggerId0;
    }

    public Long getTweetId() {
        return tweetId;
    }

    public void setTweetId(Long tweetId) {
        this.tweetId = tweetId;
    }

    public Class<?> getType() {
        return type;
    }

    public void setType(Class<?> type) {
        this.type = type;
    }

    public Long getUnixEpochTime() {
        return unixEpochTime;
    }

    public void setUnixEpochTime(Long unixEpochTime) {
        this.unixEpochTime = unixEpochTime;
    }

    public org.zendesk.client.v2.model.Attachment.Upload getUpload() {
        return upload;
    }

    public void setUpload(org.zendesk.client.v2.model.Attachment.Upload upload) {
        this.upload = upload;
    }

    public org.zendesk.client.v2.model.User getUser() {
        return user;
    }

    public void setUser(org.zendesk.client.v2.model.User user) {
        this.user = user;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getUserId0() {
        return userId0;
    }

    public void setUserId0(Long userId0) {
        this.userId0 = userId0;
    }

    public Long getUserIdThatWillBeMerged() {
        return userIdThatWillBeMerged;
    }

    public void setUserIdThatWillBeMerged(Long userIdThatWillBeMerged) {
        this.userIdThatWillBeMerged = userIdThatWillBeMerged;
    }

    public Long getUserIdThatWillRemain() {
        return userIdThatWillRemain;
    }

    public void setUserIdThatWillRemain(Long userIdThatWillRemain) {
        this.userIdThatWillRemain = userIdThatWillRemain;
    }

    public java.util.List<org.zendesk.client.v2.model.User> getUserList() {
        return userList;
    }

    public void setUserList(java.util.List<org.zendesk.client.v2.model.User> userList) {
        this.userList = userList;
    }

    public org.zendesk.client.v2.model.hc.UserSegment getUserSegment() {
        return userSegment;
    }

    public void setUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment) {
        this.userSegment = userSegment;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public org.zendesk.client.v2.model.User[] getUsers() {
        return users;
    }

    public void setUsers(org.zendesk.client.v2.model.User[] users) {
        this.users = users;
    }

    public java.util.List<org.zendesk.client.v2.model.User> getUsersList() {
        return usersList;
    }

    public void setUsersList(java.util.List<org.zendesk.client.v2.model.User> usersList) {
        this.usersList = usersList;
    }

    public org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getVariant() {
        return variant;
    }

    public void setVariant(org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant) {
        this.variant = variant;
    }
}
