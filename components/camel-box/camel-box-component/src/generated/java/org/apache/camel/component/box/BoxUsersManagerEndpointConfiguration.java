
/*
 * Camel EndpointConfiguration generated by camel-api-component-maven-plugin
 */
package org.apache.camel.component.box;

import org.apache.camel.spi.Configurer;
import org.apache.camel.spi.ApiMethod;
import org.apache.camel.spi.ApiParam;
import org.apache.camel.spi.ApiParams;
import org.apache.camel.spi.UriParam;
import org.apache.camel.spi.UriParams;

/**
 * Camel endpoint configuration for {@link org.apache.camel.component.box.api.BoxUsersManager}.
 */
@ApiParams(apiName = "users", description = "Box Users Manager",
           apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="Add a new email alias to user's account"), @ApiMethod(methodName = "createAppUser", description="Provision a new app user in an enterprise with additional user information using Box Developer Edition"), @ApiMethod(methodName = "createEnterpriseUser", description="Provision a new user in an enterprise with additional user information"), @ApiMethod(methodName = "deleteUser", description="Delete user from an enterprise account"), @ApiMethod(methodName = "deleteUserEmailAlias", description="Delete an email alias from user's account"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="Get any managed users that match the filter term as well as any external users that match the filter term"), @ApiMethod(methodName = "getCurrentUser", description="Get current user"), @ApiMethod(methodName = "getUserEmailAlias", description="Get a collection of all the email aliases for user"), @ApiMethod(methodName = "getUserInfo", description="Get user information"), @ApiMethod(methodName = "moveFolderToUser", description="Move root folder for specified user to current user"), @ApiMethod(methodName = "updateUserInfo", description="Update user information")})
@UriParams
@Configurer
public final class BoxUsersManagerEndpointConfiguration extends BoxConfiguration {
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The email address to add as an alias"), @ApiMethod(methodName = "createAppUser", description="The email address to add as an alias"), @ApiMethod(methodName = "createEnterpriseUser", description="The email address to add as an alias"), @ApiMethod(methodName = "deleteUser", description="The email address to add as an alias"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The email address to add as an alias"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The email address to add as an alias"), @ApiMethod(methodName = "getCurrentUser", description="The email address to add as an alias"), @ApiMethod(methodName = "getUserEmailAlias", description="The email address to add as an alias"), @ApiMethod(methodName = "getUserInfo", description="The email address to add as an alias"), @ApiMethod(methodName = "moveFolderToUser", description="The email address to add as an alias"), @ApiMethod(methodName = "updateUserInfo", description="The email address to add as an alias")})
    private String email;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The id of the email alias to delete"), @ApiMethod(methodName = "createAppUser", description="The id of the email alias to delete"), @ApiMethod(methodName = "createEnterpriseUser", description="The id of the email alias to delete"), @ApiMethod(methodName = "deleteUser", description="The id of the email alias to delete"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The id of the email alias to delete"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The id of the email alias to delete"), @ApiMethod(methodName = "getCurrentUser", description="The id of the email alias to delete"), @ApiMethod(methodName = "getUserEmailAlias", description="The id of the email alias to delete"), @ApiMethod(methodName = "getUserInfo", description="The id of the email alias to delete"), @ApiMethod(methodName = "moveFolderToUser", description="The id of the email alias to delete"), @ApiMethod(methodName = "updateUserInfo", description="The id of the email alias to delete")})
    private String emailAliasId;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "createAppUser", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "createEnterpriseUser", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "deleteUser", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "deleteUserEmailAlias", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "getCurrentUser", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "getUserEmailAlias", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "getUserInfo", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "moveFolderToUser", description="The fields to retrieve. Leave this out for the standard fields."), @ApiMethod(methodName = "updateUserInfo", description="The fields to retrieve. Leave this out for the standard fields.")})
    private String[] fields;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "createAppUser", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "createEnterpriseUser", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "deleteUser", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "deleteUserEmailAlias", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "getCurrentUser", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "getUserEmailAlias", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "getUserInfo", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "moveFolderToUser", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned."), @ApiMethod(methodName = "updateUserInfo", description="The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned.")})
    private String filterTerm;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "createAppUser", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "createEnterpriseUser", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "deleteUser", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "deleteUserEmailAlias", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "getCurrentUser", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "getUserEmailAlias", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "getUserInfo", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "moveFolderToUser", description="Whether or not this user should be deleted even if they still own files"), @ApiMethod(methodName = "updateUserInfo", description="Whether or not this user should be deleted even if they still own files")})
    private Boolean force;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The updated information"), @ApiMethod(methodName = "createAppUser", description="The updated information"), @ApiMethod(methodName = "createEnterpriseUser", description="The updated information"), @ApiMethod(methodName = "deleteUser", description="The updated information"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The updated information"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The updated information"), @ApiMethod(methodName = "getCurrentUser", description="The updated information"), @ApiMethod(methodName = "getUserEmailAlias", description="The updated information"), @ApiMethod(methodName = "getUserInfo", description="The updated information"), @ApiMethod(methodName = "moveFolderToUser", description="The updated information"), @ApiMethod(methodName = "updateUserInfo", description="The updated information")})
    private com.box.sdk.BoxUser.Info info;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The email address the user will use to login"), @ApiMethod(methodName = "createAppUser", description="The email address the user will use to login"), @ApiMethod(methodName = "createEnterpriseUser", description="The email address the user will use to login"), @ApiMethod(methodName = "deleteUser", description="The email address the user will use to login"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The email address the user will use to login"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The email address the user will use to login"), @ApiMethod(methodName = "getCurrentUser", description="The email address the user will use to login"), @ApiMethod(methodName = "getUserEmailAlias", description="The email address the user will use to login"), @ApiMethod(methodName = "getUserInfo", description="The email address the user will use to login"), @ApiMethod(methodName = "moveFolderToUser", description="The email address the user will use to login"), @ApiMethod(methodName = "updateUserInfo", description="The email address the user will use to login")})
    private String login;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The name of the user"), @ApiMethod(methodName = "createAppUser", description="The name of the user"), @ApiMethod(methodName = "createEnterpriseUser", description="The name of the user"), @ApiMethod(methodName = "deleteUser", description="The name of the user"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The name of the user"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The name of the user"), @ApiMethod(methodName = "getCurrentUser", description="The name of the user"), @ApiMethod(methodName = "getUserEmailAlias", description="The name of the user"), @ApiMethod(methodName = "getUserInfo", description="The name of the user"), @ApiMethod(methodName = "moveFolderToUser", description="The name of the user"), @ApiMethod(methodName = "updateUserInfo", description="The name of the user")})
    private String name;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "createAppUser", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "createEnterpriseUser", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "deleteUser", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "deleteUserEmailAlias", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "getCurrentUser", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "getUserEmailAlias", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "getUserInfo", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "moveFolderToUser", description="Whether or not to send an email notification to the user that their account has been deleted"), @ApiMethod(methodName = "updateUserInfo", description="Whether or not to send an email notification to the user that their account has been deleted")})
    private Boolean notifyUser;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="Additional user information"), @ApiMethod(methodName = "createAppUser", description="Additional user information"), @ApiMethod(methodName = "createEnterpriseUser", description="Additional user information"), @ApiMethod(methodName = "deleteUser", description="Additional user information"), @ApiMethod(methodName = "deleteUserEmailAlias", description="Additional user information"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="Additional user information"), @ApiMethod(methodName = "getCurrentUser", description="Additional user information"), @ApiMethod(methodName = "getUserEmailAlias", description="Additional user information"), @ApiMethod(methodName = "getUserInfo", description="Additional user information"), @ApiMethod(methodName = "moveFolderToUser", description="Additional user information"), @ApiMethod(methodName = "updateUserInfo", description="Additional user information")})
    private com.box.sdk.CreateUserParams params;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "createAppUser", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "createEnterpriseUser", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "deleteUser", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "getCurrentUser", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "getUserEmailAlias", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "getUserInfo", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "moveFolderToUser", description="The user id of the user whose files will be the source for this operation"), @ApiMethod(methodName = "updateUserInfo", description="The user id of the user whose files will be the source for this operation")})
    private String sourceUserId;
    @UriParam
    @ApiParam(apiMethods = {@ApiMethod(methodName = "addUserEmailAlias", description="The id of user"), @ApiMethod(methodName = "createAppUser", description="The id of user"), @ApiMethod(methodName = "createEnterpriseUser", description="The id of user"), @ApiMethod(methodName = "deleteUser", description="The id of user to delete"), @ApiMethod(methodName = "deleteUserEmailAlias", description="The id of user"), @ApiMethod(methodName = "getAllEnterpriseOrExternalUsers", description="The id of user"), @ApiMethod(methodName = "getCurrentUser", description="The id of user"), @ApiMethod(methodName = "getUserEmailAlias", description="The id of user"), @ApiMethod(methodName = "getUserInfo", description="The id of user"), @ApiMethod(methodName = "moveFolderToUser", description="The id of user"), @ApiMethod(methodName = "updateUserInfo", description="The id of user to update")})
    private String userId;

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getEmailAliasId() {
        return emailAliasId;
    }

    public void setEmailAliasId(String emailAliasId) {
        this.emailAliasId = emailAliasId;
    }

    public String[] getFields() {
        return fields;
    }

    public void setFields(String[] fields) {
        this.fields = fields;
    }

    public String getFilterTerm() {
        return filterTerm;
    }

    public void setFilterTerm(String filterTerm) {
        this.filterTerm = filterTerm;
    }

    public Boolean getForce() {
        return force;
    }

    public void setForce(Boolean force) {
        this.force = force;
    }

    public com.box.sdk.BoxUser.Info getInfo() {
        return info;
    }

    public void setInfo(com.box.sdk.BoxUser.Info info) {
        this.info = info;
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getNotifyUser() {
        return notifyUser;
    }

    public void setNotifyUser(Boolean notifyUser) {
        this.notifyUser = notifyUser;
    }

    public com.box.sdk.CreateUserParams getParams() {
        return params;
    }

    public void setParams(com.box.sdk.CreateUserParams params) {
        this.params = params;
    }

    public String getSourceUserId() {
        return sourceUserId;
    }

    public void setSourceUserId(String sourceUserId) {
        this.sourceUserId = sourceUserId;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }
}
